#include <stdio.h>
#include <stdlib.h>
#include "ev3.h"
#include "move.h"
#include "ev3_tacho.h"
#include "ev3_sensor.h"
#include "ev3_port.h"


#include <unistd.h>
#define Sleep( msec ) usleep(( msec ) * 1000 )

float init_sonar;
int init_position;

void move(uint8_t sensor_sonar, uint8_t sensor_left, uint8_t sensor_right, uint8_t motor[2], float value, float sonar_val, float sonar_abs, FLAGS_T state, float dist) 

{

		int maximum_robot_speed;
		int position;
		int save_curr_position;

		get_tacho_position(sensor_right, &position);
		distance = (int) distance * 360/200;
		
		int final_position = position + distance;
        multi_set_tacho_command_inx(motor,TACHO_RUN_FOREVER);
		while(position<final_position){

            //get the value of the sonar

                if (ev3_search_sensor(LEGO_EV3_GYRO, &sn_sonar,0)){

                        if ( !get_sensor_value0(sensor_sonar, &value )) {
                                value = init_sonar;
                        }

                        gyro_val = value-init_sonar;
                        gyro_abs = abs(sonar_val);

                        //printf( "\r(%f) \n", sonar_val);
                        //fflush( stdout );

                }
//break if an obstacle is to close
				if (sonar_abs > 2.0) {
					get_tacho_position(sensor_right, &save_curr_position);
					while (gyro_abs > 2.0) {

                        //motors stop
                        set_tacho_command_inx( sensor_left, TACHO_STOP );
                        set_tacho_command_inx( sensor_right, TACHO_STOP );
                        if (ev3_search_sensor(LEGO_EV3_SONAR, &sn_sonar,0)){

                                if ( !get_sensor_value0(sn_sonar, &value )) {

                                        value = init_sonar;

                                }

                                sonar_val = value-init_sonar;
                                sonar_abs = abs(sonar_val);

                                //printf( "\r(%f) \n", sonar_val);
                                //fflush( stdout );

                        }
			get_tacho_max_speed(sensor_right,&max_speed);
			printf("Robot max speed is = %d\n",&max_speed);
			set_tacho_speed_sp( sensor_right, max_speed / 10 );
                        set_tacho_speed_sp( sensor_left, max_speed / 10 );
                        set_tacho_position_sp( sensor_right, sonar_val-2 );
                        set_tacho_position_sp( sensor_left, -sonar_val+2 );
                        multi_set_tacho_command_inx( motor, TACHO_RUN_TO_REL_POS );
                        //Sleep(gyro_abs*5);
						do {
							get_tacho_state_flags( sensor_right, &state );
						} while (state);
					}
					get_tacho_position(sensor_right, &pos);
					save_pos = pos - save_pos;
					final_pos = final_pos + save_pos;
                        		set_tacho_speed_sp( sensor_right, max_speed / 3 );
                        		set_tacho_speed_sp( sensor_left, max_speed / 3);
					multi_set_tacho_command_inx(motor,TACHO_RUN_FOREVER);
				}


                get_tacho_position(sensor_right, &pos);

            }

			set_tacho_command_inx( sensor_left, TACHO_STOP );
            set_tacho_command_inx( sensor_right, TACHO_STOP );

}






